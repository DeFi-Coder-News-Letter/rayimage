// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// subsample
arma::mat subsample(arma::mat& circle, int size);
RcppExport SEXP _rayfocus_subsample(SEXP circleSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type circle(circleSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(subsample(circle, size));
    return rcpp_result_gen;
END_RCPP
}
// subsample_rect
arma::mat subsample_rect(arma::mat& rect, int binsx, int binsy);
RcppExport SEXP _rayfocus_subsample_rect(SEXP rectSEXP, SEXP binsxSEXP, SEXP binsySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type rect(rectSEXP);
    Rcpp::traits::input_parameter< int >::type binsx(binsxSEXP);
    Rcpp::traits::input_parameter< int >::type binsy(binsySEXP);
    rcpp_result_gen = Rcpp::wrap(subsample_rect(rect, binsx, binsy));
    return rcpp_result_gen;
END_RCPP
}
// gen_circle_psf
arma::mat gen_circle_psf(const double radius);
RcppExport SEXP _rayfocus_gen_circle_psf(SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_circle_psf(radius));
    return rcpp_result_gen;
END_RCPP
}
// is_inside
bool is_inside(double sizehex, double positionx, double positiony, double sinval, double cosval);
RcppExport SEXP _rayfocus_is_inside(SEXP sizehexSEXP, SEXP positionxSEXP, SEXP positionySEXP, SEXP sinvalSEXP, SEXP cosvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sizehex(sizehexSEXP);
    Rcpp::traits::input_parameter< double >::type positionx(positionxSEXP);
    Rcpp::traits::input_parameter< double >::type positiony(positionySEXP);
    Rcpp::traits::input_parameter< double >::type sinval(sinvalSEXP);
    Rcpp::traits::input_parameter< double >::type cosval(cosvalSEXP);
    rcpp_result_gen = Rcpp::wrap(is_inside(sizehex, positionx, positiony, sinval, cosval));
    return rcpp_result_gen;
END_RCPP
}
// gen_hex_psf
arma::mat gen_hex_psf(const double radius, const double rotation);
RcppExport SEXP _rayfocus_gen_hex_psf(SEXP radiusSEXP, SEXP rotationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double >::type rotation(rotationSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_hex_psf(radius, rotation));
    return rcpp_result_gen;
END_RCPP
}
// psf
arma::mat psf(const arma::mat& image, const IntegerMatrix blurmatrix, const arma::mat& depthmap, double depth, const arma::mat custombokeh, int type, double bokehintensity, double bokehlimit, double rotation, bool progbar, int channel);
RcppExport SEXP _rayfocus_psf(SEXP imageSEXP, SEXP blurmatrixSEXP, SEXP depthmapSEXP, SEXP depthSEXP, SEXP custombokehSEXP, SEXP typeSEXP, SEXP bokehintensitySEXP, SEXP bokehlimitSEXP, SEXP rotationSEXP, SEXP progbarSEXP, SEXP channelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type blurmatrix(blurmatrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type depthmap(depthmapSEXP);
    Rcpp::traits::input_parameter< double >::type depth(depthSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type custombokeh(custombokehSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type bokehintensity(bokehintensitySEXP);
    Rcpp::traits::input_parameter< double >::type bokehlimit(bokehlimitSEXP);
    Rcpp::traits::input_parameter< double >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< bool >::type progbar(progbarSEXP);
    Rcpp::traits::input_parameter< int >::type channel(channelSEXP);
    rcpp_result_gen = Rcpp::wrap(psf(image, blurmatrix, depthmap, depth, custombokeh, type, bokehintensity, bokehlimit, rotation, progbar, channel));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rayfocus_subsample", (DL_FUNC) &_rayfocus_subsample, 2},
    {"_rayfocus_subsample_rect", (DL_FUNC) &_rayfocus_subsample_rect, 3},
    {"_rayfocus_gen_circle_psf", (DL_FUNC) &_rayfocus_gen_circle_psf, 1},
    {"_rayfocus_is_inside", (DL_FUNC) &_rayfocus_is_inside, 5},
    {"_rayfocus_gen_hex_psf", (DL_FUNC) &_rayfocus_gen_hex_psf, 2},
    {"_rayfocus_psf", (DL_FUNC) &_rayfocus_psf, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_rayfocus(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
